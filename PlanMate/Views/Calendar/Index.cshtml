@model IEnumerable<PlanMate.Entities.Event>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/Content/AdminLTE-3.1.0/plugins/fullcalendar/main.css">
    <link rel="stylesheet" href="~/Content/calendar-styles.css">
}

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Takvim</h1>
            </div>
            <div class="col-sm-6">
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-3">
                <div class="sticky-top mb-3">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Sürüklenebilir Etkinlikler</h4>
                        </div>
                        <div class="card-body">
                            <div id="external-events">
                                <div id="external-events-list">
                                </div>
                                <div class="checkbox" style="margin-top: 15px;">
                                    <label for="drop-remove">
                                        <input type="checkbox" id="drop-remove">
                                        Bıraktıktan sonra kaldır
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Etkinlik Oluştur</h3>
                        </div>
                        <div class="card-body">
                            <form id="event-form">
                                <div class="form-group">
                                    <label for="event-title">Başlık</label>
                                    <input type="text" class="form-control" id="event-title" placeholder="Etkinlik başlığı giriniz" required>
                                </div>

                                <div class="form-group">
                                    <label for="event-description">Açıklama</label>
                                    <textarea class="form-control" id="event-description" rows="3" placeholder="Etkinlik açıklaması giriniz"></textarea>
                                </div>

                                <div class="form-group">
                                    <label for="event-category">Kategori</label>
                                    <select class="form-control" id="event-category">
                                        <option value="">Kategori seçiniz</option>
                                        @foreach (var category in ViewBag.Categories ?? new List<SelectListItem>())
                                        {
                                            var categoryColors = ViewBag.CategoryColors as Dictionary<string, string>;
                                            var color = categoryColors != null && categoryColors.ContainsKey(category.Value) ? categoryColors[category.Value] : "#3c8dbc";
                                            <option value="@category.Value" data-color="@color">@category.Text</option>
                                        }
                                    </select>
                                </div>

                                <div class="form-group">
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" class="custom-control-input" id="event-all-day">
                                        <label class="custom-control-label" for="event-all-day">Tüm gün</label>
                                    </div>
                                </div>

                                <button type="submit" class="btn btn-primary btn-block">Etkinlik Oluştur</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                <div class="card card-primary">
                    <div class="card-body p-0">
                        <div id="calendar"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade" id="eventDetailModal" tabindex="-1" role="dialog" aria-labelledby="eventDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventDetailModalLabel">Etkinlik Detayı</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label><strong>Başlık:</strong></label>
                    <p id="modal-event-title" class="form-control-plaintext"></p>
                </div>
                <div class="form-group">
                    <label><strong>Açıklama:</strong></label>
                    <p id="modal-event-description" class="form-control-plaintext"></p>
                </div>
                <div class="form-group">
                    <label><strong>Kategori:</strong></label>
                    <p id="modal-event-category" class="form-control-plaintext"></p>
                </div>
                <div class="form-group">
                    <label><strong>Tarih:</strong></label>
                    <p id="modal-event-date" class="form-control-plaintext"></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="edit-event-btn">Düzenle</button>
                <button type="button" class="btn btn-danger" id="delete-event-btn">Sil</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="~/Content/AdminLTE-3.1.0/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/Content/AdminLTE-3.1.0/plugins/moment/moment.min.js"></script>
    <script src="~/Content/AdminLTE-3.1.0/plugins/fullcalendar/main.js"></script>

    <script>
        moment.locale('tr');

        $(function () {

            function ini_events(ele) {
                ele.each(function () {
                    $(this).draggable({
                        zIndex        : 1070,
                        revert        : true,
                        revertDuration: 0
                    })
                })
            }

            ini_events($('#external-events div.external-event'))

            loadExternalEvents();

            function loadExternalEvents() {
                $.ajax({
                    url: '@Url.Action("GetExternalEvents", "Calendar")',
                    type: 'GET',
                    dataType: 'json',
                    success: function(data) {
                        console.log('Sürüklenebilir etkinlikler yüklendi:', data);

                        $('#external-events-list').empty();

                        data.forEach(function(event) {
                            var eventElement = $('<div />')
                            eventElement.css({
                                'background-color': event.backgroundColor,
                                'border-color'    : event.borderColor,
                                'color'           : event.textColor,
                                'padding'         : '5px 10px',
                                'margin'          : '5px 0',
                                'border-radius'   : '3px',
                                'cursor'          : 'move'
                            }).addClass('external-event')

                            eventElement.text(event.title)

                            eventElement.data('eventData', {
                                id: event.id,
                                title: event.title,
                                description: event.description,
                                categoryId: event.categoryId,
                                categoryName: event.categoryName,
                                isAllDay: event.isAllDay,
                                color: event.backgroundColor
                            })

                            $('#external-events-list').append(eventElement)
                        })

                        ini_events($('#external-events-list div.external-event'))
                    },
                    error: function(xhr, status, error) {
                        console.log('Sürüklenebilir etkinlikler yüklenirken hata:', error)
                    }
                })
            }

            var date = new Date()
            var d    = date.getDate(),
                m    = date.getMonth(),
                y    = date.getFullYear()

            var Calendar = FullCalendar.Calendar;
            var Draggable = FullCalendar.Draggable;

            var containerEl = document.getElementById('external-events');
            var checkbox = document.getElementById('drop-remove');
            var calendarEl = document.getElementById('calendar');

            new Draggable(containerEl, {
              itemSelector: '.external-event',
              eventData: function(eventEl) {
                var eventData = $(eventEl).data('eventData');

                return {
                  title: eventEl.innerText,
                  backgroundColor: window.getComputedStyle( eventEl ,null).getPropertyValue('background-color'),
                  borderColor: window.getComputedStyle( eventEl ,null).getPropertyValue('background-color'),
                  textColor: window.getComputedStyle( eventEl ,null).getPropertyValue('color'),
                  id: eventData ? eventData.id : null,
                  description: eventData ? eventData.description : '',
                  categoryName: eventData ? eventData.categoryName : '',
                  categoryId: eventData ? eventData.categoryId : null,
                  isAllDay: eventData ? eventData.isAllDay : false
                };
              }
            });

            var calendar = new Calendar(calendarEl, {
                headerToolbar: {
                    left  : 'prev,next today',
                    center: 'title',
                    right : 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                themeSystem: 'bootstrap',
                locale: 'tr',
                buttonText: {
                    today: 'Bugün',
                    month: 'Ay',
                    week: 'Hafta',
                    day: 'Gün'
                },
                dayHeaderFormat: { weekday: 'long' },
                titleFormat: { year: 'numeric', month: 'long' },
                events: function(info, successCallback, failureCallback) {
                    console.log('AJAX çağrısı başlatılıyor...');

                    var url = '@Url.Action("GetEvents", "Calendar")';
                    console.log('URL:', url);

                    $.ajax({
                        url: url,
                        type: 'GET',
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            console.log('AJAX başarılı:', data);
                            console.log('Veri tipi:', typeof data);
                            console.log('Veri uzunluğu:', data ? data.length : 'undefined');

                            if (data && data.length > 0) {
                                data.forEach(function(event, index) {
                                    console.log(`Etkinlik ${index + 1}:`, event);
                                    console.log(`  - Başlık: ${event.title}`);
                                    console.log(`  - Başlangıç: ${event.start}`);
                                    console.log(`  - Bitiş: ${event.end}`);
                                    console.log(`  - Renk: ${event.backgroundColor}`);
                                });
                            }

                            successCallback(data);
                        },
                        error: function(xhr, status, error) {
                            console.log('AJAX hatası - Status:', status);
                            console.log('AJAX hatası - Error:', error);
                            console.log('AJAX hatası - Response:', xhr.responseText);
                            console.log('AJAX hatası - Status Code:', xhr.status);
                            console.log('AJAX hatası - URL:', url);
                            failureCallback('Etkinlikler yüklenirken hata oluştu');
                        }
                    });
                },
                eventClick: function(info) {
                    var event = info.event;
                    var title = event.title;
                    var description = event.extendedProps.description || '';
                    var categoryName = event.extendedProps.categoryName || '';
                    var startDate = event.start;
                    var endDate = event.end;

                    $('#modal-event-title').text(title);
                    $('#modal-event-description').text(description || 'Açıklama yok');
                    $('#modal-event-category').text(categoryName || 'Kategori yok');

                    var dateText = '';
                    if (startDate) {
                        var start = moment(startDate).format('DD MMMM YYYY');
                        if (endDate && !moment(startDate).isSame(moment(endDate), 'day')) {
                            var end = moment(endDate).format('DD MMMM YYYY');
                            dateText = start + ' - ' + end;
                        } else {
                            dateText = start;
                        }
                    }
                    $('#modal-event-date').text(dateText);

                    if (event.id) {
                        var startDateStr = moment(startDate).format('YYYY-MM-DD');
                        var endDateStr = moment(endDate || startDate).format('YYYY-MM-DD');

                        console.log('=== EVENT CLICK - TARİH GÜNCELLEME ===');
                        console.log('Etkinlik ID:', event.id);
                        console.log('Başlangıç tarihi:', startDateStr);
                        console.log('Bitiş tarihi:', endDateStr);

                        $.ajax({
                            url: '@Url.Action("UpdateEventDate", "Calendar")',
                            type: 'POST',
                            data: {
                                eventId: event.id,
                                startDate: startDateStr,
                                endDate: endDateStr
                            },
                            success: function(response) {
                                if (response.success) {
                                    console.log('Etkinlik tarihi başarıyla güncellendi');
                                } else {
                                    console.log('Hata:', response.message);
                                }
                            },
                            error: function(xhr, status, error) {
                                console.log('AJAX hatası:', error);
                            }
                        });
                    }

                    $('#eventDetailModal').modal('show');

                    $('#edit-event-btn').off('click').on('click', function() {
                        if (event.id) {
                            window.location.href = '@Url.Action("Edit", "Event")/' + event.id;
                        }
                    });

                    $('#delete-event-btn').off('click').on('click', function() {
                        if (event.id) {
                            window.location.href = '@Url.Action("Delete", "Event")/' + event.id;
                        }
                    });
                },
                editable  : true,
                droppable : true,

                drop      : function(info) {
                    if (checkbox.checked) {
                        info.draggedEl.parentNode.removeChild(info.draggedEl);
                    }
                }
            });

            calendar.render();

            $('#event-form').submit(function (e) {
                e.preventDefault()

                var title = $('#event-title').val()
                var description = $('#event-description').val()
                var category = $('#event-category').val()
                var isAllDay = $('#event-all-day').is(':checked')

                if (title.length == 0) {
                    alert('Lütfen etkinlik başlığı giriniz!')
                    return
                }

                var requestData = {
                    Title: title,
                    Description: description,
                    CategoryId: category || null,
                    IsAllDay: isAllDay
                };

                console.log('Gönderilen veri:', requestData);

                $.ajax({
                    url: '@Url.Action("CreateEventWithoutDate", "Calendar")',
                    type: 'POST',
                    data: requestData,
                    dataType: 'json',
                    success: function(response) {
                        console.log('AJAX başarılı:', response);
                        if (response.success) {
                            console.log('Etkinlik başarıyla oluşturuldu:', response);

                            var categoryColor = '#3c8dbc'
                            if (category) {
                                var selectedOption = $('#event-category option:selected')
                                var color = selectedOption.data('color')
                                if (color) {
                                    categoryColor = color
                                }
                            }

                            var event = $('<div />')
                            event.css({
                                'background-color': categoryColor,
                                'border-color'    : categoryColor,
                                'color'           : '#fff',
                                'padding'         : '5px 10px',
                                'margin'          : '5px 0',
                                'border-radius'   : '3px',
                                'cursor'          : 'move'
                            }).addClass('external-event')

                            event.text(title)

                            event.data('eventData', {
                                id: response.id,
                                title: title,
                                description: description,
                                categoryId: category,
                                categoryName: $('#event-category option:selected').text(),
                                isAllDay: isAllDay,
                                color: categoryColor
                            })

                            $('#external-events-list').prepend(event)

                            ini_events(event)

                            $('#event-form')[0].reset()

                            loadExternalEvents()
                        } else {
                            alert('Hata: ' + response.message)
                        }
                    },
                    error: function(xhr, status, error) {
                        console.log('AJAX hatası - Status:', status);
                        console.log('AJAX hatası - Error:', error);
                        console.log('AJAX hatası - Response:', xhr.responseText);
                        console.log('AJAX hatası - Status Code:', xhr.status);

                        var errorMessage = 'Etkinlik oluşturulurken hata oluştu!';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        alert(errorMessage);
                    }
                })
            })
        })
    </script>
}